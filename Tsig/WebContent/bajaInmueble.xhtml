<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:b="http://bootsfaces.net/ui"
	>
	

  <h:head>
      <h:outputStylesheet library="css" name="styles.css" />
     
 <script  src="http://code.jquery.com/jquery-2.1.4.min.js"></script>
	
 <script src="http://www.openlayers.org/api/2.11/OpenLayers.js"></script>


	 
	 
    <title>OpenLayers 3 example</title>
    
    
    <script type="text/javascript">
    
    
    var map;
    var wms;

    var puntos;
   
    var saveStrategy = new OpenLayers.Strategy.Save();
   

    var bounds = new OpenLayers.Bounds(366582.582,6127927,858252.252,6671738);
    
    var map_controls = [
                         new OpenLayers.Control.PanZoomBar(), 
                         new OpenLayers.Control.MouseToolbar(),
                         
                         ];
	var mapoptions = 
		{ 
			
			
			units: 'm',
			projection: "EPSG:32721",
			maxExtent:bounds ,
			center: new OpenLayers.LonLat(574553.537,6141267.75),
			maxResolution: 1000
	    };
	 var defStyle = {strokeColor: "blue", strokeOpacity: "0.7", strokeWidth: 3, cursor: "pointer"};

	 
	function init() {
		
	
		     map = new OpenLayers.Map('map', mapoptions);            
		            // setup tiled layer
		           var tiled = new OpenLayers.Layer.WMS(
		        		   
                "mapabase", "http://localhost:8080/geoserver/sige/wms",
                {LAYERS: 'sige:mapabase',projection: new OpenLayers.Projection('EPSG:32721')}
                            
            );
		           tiled.style=OpenLayers.Util.applyDefaults(OpenLayers.Feature.Vector.style["default"]);

		          		           
		           tiled.style.externalGraphic="resources/Images/bus.gif";
		           tiled.style.graphicWidth= 20;
		           tiled.style.graphicHeight= 20;
		           tiled.style.fillOpacity=1;


		           var stylePuntos = new OpenLayers.Style(
		        	        // the first argument is a base symbolizer
		        	        // all other symbolizers in rules will extend this one
		        	        {
		        	            graphicWidth: 40,
		        	            graphicHeight: 32,
		        	           
		        	           
		        	        },
		        	        // the second argument will include all rules
		        	        {
		        	            rules: [
		        	                new OpenLayers.Rule({
		        	                    // a rule contains an optional filter
		        	                    filter: new OpenLayers.Filter.Comparison({
		        	                        type: OpenLayers.Filter.Comparison.EQUAL_TO,
		        	                        property: "estado", // the "foo" feature attribute
		        	                        value: "privada"
		        	                    }),
		        	                    // if a feature matches the above filter, use this symbolizer
		        	                    symbolizer: {
		    		        	  
		        	                        externalGraphic: "resources/Images/casa.png"
		        	                    }
		        	                }),
		        	                new OpenLayers.Rule({
		        	                    // a rule contains an optional filter
		        	                    filter: new OpenLayers.Filter.Comparison({
		        	                        type: OpenLayers.Filter.Comparison.EQUAL_TO,
		        	                        property: "estado", // the "foo" feature attribute
		        	                        value: "reservada"
		        	                    }),
		        	                    // if a feature matches the above filter, use this symbolizer
		        	                    symbolizer: {
		    		        	     
		        	                        externalGraphic: "resources/Images/casaReservada.png"
		        	                    }
		        	                }),
		        	                new OpenLayers.Rule({
		        	                    // a rule contains an optional filter
		        	                    filter: new OpenLayers.Filter.Comparison({
		        	                        type: OpenLayers.Filter.Comparison.EQUAL_TO,
		        	                        property: "estado", // the "foo" feature attribute
		        	                        value: "publica"
		        	                    }),
		        	                    // if a feature matches the above filter, use this symbolizer
		        	                    symbolizer: {
		    		        	      
		        	                        externalGraphic: "resources/Images/casapublica.png"
		        	                    }
		        	                }),
		    
		        	            ]
		        	        }
		        	    );
		           var styleAptos = new OpenLayers.Style(
		        	        // the first argument is a base symbolizer
		        	        // all other symbolizers in rules will extend this one
		        	        {
		        	            graphicWidth: 50,
		        	            graphicHeight: 38,
		        	           
		        	           
		        	        },
		        	        // the second argument will include all rules
		        	        {
		        	            rules: [
		        	                new OpenLayers.Rule({
		        	                    // a rule contains an optional filter
		        	                    filter: new OpenLayers.Filter.Comparison({
		        	                        type: OpenLayers.Filter.Comparison.EQUAL_TO,
		        	                        property: "estado", // the "foo" feature attribute
		        	                        value: "privada"
		        	                    }),
		        	                    // if a feature matches the above filter, use this symbolizer
		        	                    symbolizer: {
		    		        	  
		        	                        externalGraphic: "resources/Images/aptoprivado.png"
		        	                    }
		        	                }),
		        	                new OpenLayers.Rule({
		        	                    // a rule contains an optional filter
		        	                    filter: new OpenLayers.Filter.Comparison({
		        	                        type: OpenLayers.Filter.Comparison.EQUAL_TO,
		        	                        property: "estado", // the "foo" feature attribute
		        	                        value: "reservada"
		        	                    }),
		        	                    // if a feature matches the above filter, use this symbolizer
		        	                    symbolizer: {
		    		        	     
		        	                        externalGraphic: "resources/Images/aptoReservado.png"
		        	                    }
		        	                }),
		        	                new OpenLayers.Rule({
		        	                    // a rule contains an optional filter
		        	                    filter: new OpenLayers.Filter.Comparison({
		        	                        type: OpenLayers.Filter.Comparison.EQUAL_TO,
		        	                        property: "estado", // the "foo" feature attribute
		        	                        value: "publica"
		        	                    }),
		        	                    // if a feature matches the above filter, use this symbolizer
		        	                    symbolizer: {
		    		        	      
		        	                        externalGraphic: "resources/Images/aptopublico.png"
		        	                    }
		        	                }),
		    
		        	            ]
		        	        }
		        	    );
			          
		            puntos = new OpenLayers.Layer.Vector(
		                    "casageom",
		                    {
		                        strategies: [new OpenLayers.Strategy.BBOX(), saveStrategy]
		                        , projection: new OpenLayers.Projection("EPSG:32721")
		                         ,protocol: new OpenLayers.Protocol.WFS({
		                            version: "1.1.0",
		                            srsName: "EPSG:32721",
		                            url: "http://localhost:8080/geoserver/wfs",
		                            featurePrefix: 'sige', //geoserver worspace name
		                            featureType: "casageom", //geoserver Layer Name
		                            featureNS: "localhost:8080/geoserver/sige", // Edit Workspace Namespace URI
		                            geometryName: "punto", // field in Feature Type details with type "Geometry"
		                            
		                        }),

		                        filter:"",
		                        styleMap: new OpenLayers.StyleMap(stylePuntos)
		                    
		                    });
		            
		            aptos = new OpenLayers.Layer.Vector(
		                    "aptogeom",
		                    {
		                        strategies: [new OpenLayers.Strategy.BBOX(), saveStrategy]
		                        , projection: new OpenLayers.Projection("EPSG:32721")
		                         ,protocol: new OpenLayers.Protocol.WFS({
		                            version: "1.1.0",
		                            srsName: "EPSG:32721",
		                            url: "http://localhost:8080/geoserver/wfs",
		                            featurePrefix: 'sige', //geoserver worspace name
		                            featureType: "aptogeom", //geoserver Layer Name
		                            featureNS: "localhost:8080/geoserver/sige", // Edit Workspace Namespace URI
		                            geometryName: "punto", // field in Feature Type details with type "Geometry"
		                            
		                        }),

		                        filter:"",
		                        styleMap: new OpenLayers.StyleMap(styleAptos)
		                    
		                    });
		            
	
		           map.addLayers([tiled,puntos,aptos]);
		           document.getElementById('eliminar:getuser').click();

		           
		           var panel = new OpenLayers.Control.Panel(
		                   {displayClass: 'olControlEditingToolbar'}
		               );
	               
		           var selectFeature = new OpenLayers.Control.SelectFeature(puntos, {
		                	   hover: false,
		                	   onSelect: clickNotice,
		                       autoActivate: true
		                   });
                   map.addControl(selectFeature);

                   panel.addControls([new OpenLayers.Control.Navigation()]);
                   map.addControl(panel);
                   map.addControl(new OpenLayers.Control.LayerSwitcher());
		           
 		           map.zoomTo(7);
 		           
 		         function clickNotice(event) {
 		        	
	        	        var id = event.attributes.id;
						var input = document.getElementById('info:idcasa');
						input.value=id;
						document.getElementById('info:getinfo').click();
						selectFeature.unselectAll();
 		        }      
  		            
		            
		}
		
		function show(){
	
			document.getElementById('atrigger').click();
	
		}
		
		function updateFilter() {

			
			var inputs = document.getElementById('eliminar:este');
			var inputsA = document.getElementById('eliminar:este2');
			
			var idFilter = [];
			var idFilterA = [];
			var filt =[];
			var filtA = [];
		
			for (key in inputs.children) {
				
				if(!(isNaN(key))){
				idFilter.push(inputs.children[key].value);
				}
				
			}
			//Id filter contiene los ids a filtrar
			for (key in inputsA.children) {
				
				if(!(isNaN(key))){
					idFilterA.push(inputsA.children[key].value);
				}
				
			}
			
			
			
			for (key in idFilter){
				    filt[key] = new OpenLayers.Filter.Comparison({
				    type: OpenLayers.Filter.Comparison.EQUAL_TO,
				     property: "id",
				    value: idFilter[key]
				});
				
			}
			
			for (key in idFilterA){
				filtA[key] = new OpenLayers.Filter.Comparison({
			    type: OpenLayers.Filter.Comparison.EQUAL_TO,
			     property: "id",
			    value: idFilterA[key]
			});
			
		}
			


			puntos.filter= new OpenLayers.Filter.Logical({
			    	type: OpenLayers.Filter.Logical.OR,
			    	filters: filt
			});
			

			aptos.filter= new OpenLayers.Filter.Logical({
		    	type: OpenLayers.Filter.Logical.OR,
		    	filters: filtA
			});
		
			puntos.refresh({force:true});
			aptos.refresh({force:true});
			
		}
		
		function handleAjax(data) {
		    var status = data.status;

		    switch(status) {
		        case "begin":
		            // This is invoked right before ajax request is sent.
		            break;

		        case "complete":
		            // This is invoked right after ajax response is returned.
		            break;

		        case "success":
		           show();
		            break;
		    }
		}
		
		function handleAjax2(data) {
		    var status = data.status;

		    switch(status) {
		        case "begin":
		            // This is invoked right before ajax request is sent.
		            break;

		        case "complete":
		            // This is invoked right after ajax response is returned.
		            break;

		        case "success":
		        	updateFilter();
		            break;
		    }
		}
	
		function eliminarFeature(){
		
			 document.getElementById('eliminar:eliminarfeature').click();
			
		}

	 </script>
  </h:head>
   <h:body class="fondo" onload="init()">
   
 <h:form id="eliminar">
  <h:commandButton id="getuser" actionListener="#{propiedadMB.getUser}" style="display: none;" >
  	<f:ajax execute="@form"  onevent="handleAjax2" render="este este2" update="este este2"/>
  </h:commandButton>
  <h:commandButton id="eliminarfeature" actionListener ="#{propiedadMB.eliminarFeature()}" style="display: none;" >
  	<f:ajax  execute="@all" onevent="handleAjax2" render="@all" update="este"/>
  	<f:attribute name="id" value="dsa" />
  </h:commandButton>		
  
  <h:panelGroup  id="este">
    <ui:repeat value="#{propiedadMB.casas}"  var="id">
		<h:inputHidden value="#{id}" class="ids" /> 
	</ui:repeat>
</h:panelGroup>

<h:panelGroup  id="este2">
    <ui:repeat value="#{propiedadMB.aptos}"  var="id">
		<h:inputHidden value="#{id}" class="ids" /> 
	</ui:repeat>
</h:panelGroup>
  </h:form>
   
   <div id="cont" class="contenedor">

   
    
   <div id="mapWrap" class="mapWrap">
    <div id="map" class="map"></div>
 	
    
    
    </div>
   

  </div>
  </h:body>
</html>
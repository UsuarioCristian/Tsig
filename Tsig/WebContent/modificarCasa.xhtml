<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:b="http://bootsfaces.net/ui"
	>
	

  <h:head>
      <h:outputStylesheet library="css" name="styles.css" />
     
 <script  src="http://code.jquery.com/jquery-2.1.4.min.js"></script>
	
 <script src="http://www.openlayers.org/api/2.11/OpenLayers.js"></script>


	 
	 
    <title>OpenLayers 3 example</title>
    
    
    <script type="text/javascript">
    
    
    var map;
    var wms;

    var puntos;
   
    var saveStrategy = new OpenLayers.Strategy.Save();
   

    var bounds = new OpenLayers.Bounds(366582.582,6127927,858252.252,6671738);
    
    var map_controls = [
                         new OpenLayers.Control.PanZoomBar(), 
                         new OpenLayers.Control.MouseToolbar(),
                         
                         ];
	var mapoptions = 
		{ 
			
			
			units: 'm',
			projection: "EPSG:32721",
			maxExtent:bounds ,
			center: new OpenLayers.LonLat(574553.537,6141267.75),
			maxResolution: 1000
	    };
	 var defStyle = {strokeColor: "blue", strokeOpacity: "0.7", strokeWidth: 3, cursor: "pointer"};

	 
	function init() {
		
	
		     map = new OpenLayers.Map('map', mapoptions);            
		            // setup tiled layer
		           var tiled = new OpenLayers.Layer.WMS(
		        		   
                "mapabase", "http://localhost:8080/geoserver/sige/wms",
                {LAYERS: 'sige:mapabase',projection: new OpenLayers.Projection('EPSG:32721')}
                            
            );
		           tiled.style=OpenLayers.Util.applyDefaults(OpenLayers.Feature.Vector.style["default"]);

		          		           
		           tiled.style.externalGraphic="resources/Images/bus.gif";
		           tiled.style.graphicWidth= 20;
		           tiled.style.graphicHeight= 20;
		           tiled.style.fillOpacity=1;


		           var stylePuntos = new OpenLayers.Style(
		        	        // the first argument is a base symbolizer
		        	        // all other symbolizers in rules will extend this one
		        	        {
		        	            graphicWidth: 40,
		        	            graphicHeight: 32,
		        	           
		        	           
		        	        },
		        	        // the second argument will include all rules
		        	        {
		        	            rules: [
		        	                new OpenLayers.Rule({
		        	                    // a rule contains an optional filter
		        	                    filter: new OpenLayers.Filter.Comparison({
		        	                        type: OpenLayers.Filter.Comparison.EQUAL_TO,
		        	                        property: "estado", // the "foo" feature attribute
		        	                        value: "privada"
		        	                    }),
		        	                    // if a feature matches the above filter, use this symbolizer
		        	                    symbolizer: {
		    		        	  
		        	                        externalGraphic: "resources/Images/casa.png"
		        	                    }
		        	                }),
		        	                new OpenLayers.Rule({
		        	                    // a rule contains an optional filter
		        	                    filter: new OpenLayers.Filter.Comparison({
		        	                        type: OpenLayers.Filter.Comparison.EQUAL_TO,
		        	                        property: "estado", // the "foo" feature attribute
		        	                        value: "reservada"
		        	                    }),
		        	                    // if a feature matches the above filter, use this symbolizer
		        	                    symbolizer: {
		    		        	     
		        	                        externalGraphic: "resources/Images/casaReservada.png"
		        	                    }
		        	                }),
		        	                new OpenLayers.Rule({
		        	                    // a rule contains an optional filter
		        	                    filter: new OpenLayers.Filter.Comparison({
		        	                        type: OpenLayers.Filter.Comparison.EQUAL_TO,
		        	                        property: "estado", // the "foo" feature attribute
		        	                        value: "publica"
		        	                    }),
		        	                    // if a feature matches the above filter, use this symbolizer
		        	                    symbolizer: {
		    		        	      
		        	                        externalGraphic: "resources/Images/casapublica.png"
		        	                    }
		        	                }),
		    
		        	            ]
		        	        }
		        	    );
			          
		            puntos = new OpenLayers.Layer.Vector(
		                    "casageom",
		                    {
		                        strategies: [new OpenLayers.Strategy.BBOX(), saveStrategy]
		                        , projection: new OpenLayers.Projection("EPSG:32721")
		                         ,protocol: new OpenLayers.Protocol.WFS({
		                            version: "1.1.0",
		                            srsName: "EPSG:32721",
		                            url: "http://localhost:8080/geoserver/wfs",
		                            featurePrefix: 'sige', //geoserver worspace name
		                            featureType: "casageom", //geoserver Layer Name
		                            featureNS: "localhost:8080/geoserver/sige", // Edit Workspace Namespace URI
		                            geometryName: "punto", // field in Feature Type details with type "Geometry"
		                            
		                        }),

		                        filter:"",
		                        styleMap: new OpenLayers.StyleMap(stylePuntos)
		                    
		                    });
		            
		          
	
		           map.addLayers([tiled,puntos]);

		           
		           var panel = new OpenLayers.Control.Panel(
		                   {displayClass: 'olControlEditingToolbar'}
		               );
	               
		           

                   panel.addControls([new OpenLayers.Control.Navigation()]);
                   map.addControl(panel);
                   map.addControl(new OpenLayers.Control.LayerSwitcher());
                   dragFeature = new OpenLayers.Control.DragFeature(puntos, {
                	   onComplete: endDrag
                	 });
                   function endDrag(feature, pixel) {
                	    	feature.state = OpenLayers.State.UPDATE;
                	    
                	}
                   map.addControl(dragFeature);
                   dragFeature.activate();
                   
                   var id = document.getElementById('idcasa').value;
                   
        			puntos.filter = new OpenLayers.Filter.Comparison({
        			    type: OpenLayers.Filter.Comparison.EQUAL_TO,
        			     property: "id",
        			    value: id
        				});
        			puntos.refresh({force:true});
		           
 		           map.zoomTo(7);
 		         
 		           
 		    
  		            
		            
		}
		
	
		

		 
		function save() {

	 			alert("entre");
	 		
	 			saveStrategy.save();
	 			
	 			

	 			
	 		}
		
		
	
	

	 </script>
  </h:head>
  
 <h:body class="fondo" onload="init()">
   
 
  
  
	<h:form id="modificarInmueble">
	  
		<div id="cont" class="contenedor">
		  
			<div id="mapWrap" class="mapWrap">
			    	
			    <div id="map" class="map"></div>
			 	
			</div>
		 
		</div>
		
		<b:panel id="datos" styleClass="panel panel-primary outtab" title="Modificar Casa">
	 
	      
	    <b:panelGrid colSpans="2,10" rowClasses="rowform">
	    
		    <h:outputLabel value="Titulo de la casa" />
		    <b:inputText span="8" value="#{propiedadMB.titulo}"/>
		         
		    <h:outputLabel value="Barrio de la casa" />	    
		    <b:inputText span="8" value="#{propiedadMB.barrio}"/>
		    
		    <h:outputLabel value="Tipo de propiedad" />	
		    
		    <b:selectOneMenu span="8" value="#{propiedadMB.tipoProp}" >
	            <f:selectItem itemLabel="Comercial" itemValue="Comercial"/>
	            <f:selectItem itemLabel="Residencial" itemValue="Residencial"/>
	        </b:selectOneMenu>
	        
	        <h:outputLabel value="Tipo de negocio" />	
	        
	        <b:selectOneMenu span="8" value="#{propiedadMB.tipoNegocio}" >
	            <f:selectItem itemLabel="Alquiler" itemValue="Alquiler"/>
	            <f:selectItem itemLabel="Venta" itemValue="Venta"/>
	        </b:selectOneMenu>
	        
	        <h:outputLabel value="Cantidad de baños" />	    
		    <b:inputText span="8" value="#{propiedadMB.cantBanios}"/>
	        
	        <h:outputLabel value="Cantidad de cuartos" />	    
		    <b:inputText span="8" value="#{propiedadMB.cantCuartos}"/>
	        
	         <h:outputLabel value="Precio" />	    
		    <b:inputText span="8" value="#{propiedadMB.precio}"/>
		    
		    <h:outputLabel value="Tamaño" />	    
		    <b:inputText span="8" value="#{propiedadMB.tamanio}"/>
		    
		    <h:outputLabel value="Numero de piso" />	    
		    <b:inputText span="8" value="#{propiedadMB.numeroap}"/>
		    
		    <h:outputLabel value="Piscina: " />
		    <b:selectBooleanCheckbox value="#{propiedadMB.piscina}" />
		    
		    <h:outputLabel value="Garage: " />
		    <b:selectBooleanCheckbox value="#{propiedadMB.garage}" />
		    
			    
		</b:panelGrid>
	</b:panel>
	  
	  <h:commandButton id="save" value="Guardar Inmueble" type="submit" action="#{propiedadMB.modificarCasa}" onclick="save()" ></h:commandButton>	 
	  
  </h:form>
  
  <h:inputHidden value="#{propiedadMB.idPunto}" id="idcasa" />
  </h:body>
</html>
<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:b="http://bootsfaces.net/ui"
	>

<h:head>



 <h:outputStylesheet library="css" name="styles.css" />
      <h:outputStylesheet library="css" name="remodal.css" />
      <h:outputStylesheet library="css" name="remodal-default-theme.css" />
      
 <script  src="http://code.jquery.com/jquery-2.1.4.min.js">	 </script>
 <script type="text/javascript" src="resources/js/remodal.js"></script>
  <script type="text/javascript" src="resources/js/proj4.js"></script>
 



<link rel="stylesheet" href="http://openlayers.org/en/v3.1.1/css/ol.css"
	type="text/css"></link>
<style>
.mapWrap{	
			display: block;
 	 		margin-left: auto;
 			margin-right: auto;
 			width: 80%;
 			height: 80%;
 	 }
.map {


	height: 100%;
	width: 100%;
	
	border: solid 1px;
	
}
</style>
<script src="http://www.openlayers.org/api/2.11/OpenLayers.js"></script>
<title>OpenLayers 3 example</title>


<script type="text/javascript">
    
    var map;
    var wms;
    var puntos;
    var aptos;
    var paradas;
    var supers;
	var parcelas;	
    
    var saveStrategy = new OpenLayers.Strategy.Save();
   
	var cantidad= 0;
    var bounds = new OpenLayers.Bounds(366582.582,6127927,858252.252,6671738);
    
    var map_controls = [
                         new OpenLayers.Control.PanZoomBar(), 
                         new OpenLayers.Control.MouseToolbar(),
                         
                         ];
	var mapoptions = 
		{ 
			
			
			units: 'm',
			projection: "EPSG:32721",
			maxExtent:bounds ,
			
			center: new OpenLayers.LonLat(574553.537,6141267.75),
			maxResolution: 1000
			
			
	    };
	
	function init() {
		

		

		
		
			$("#btnDetalles").click(function(){

				  document.getElementById('consultaInmueble:redirect').click();

			 });
	
		     map = new OpenLayers.Map('map', mapoptions);            
		            // setup tiled layer
		    var tiled = new OpenLayers.Layer.WMS(
		        		   
                "mapabase", "http://localhost:8080/geoserver/sige/wms",
                {LAYERS: 'sige:mapabase',projection: new OpenLayers.Projection('EPSG:32721')}
                            
            );


		            
		           var styleSuper = new OpenLayers.Style(
		        	        // the first argument is a base symbolizer
		        	        // all other symbolizers in rules will extend this one
		        	        {
		        	            graphicWidth: 30,
		        	            graphicHeight: 30,
		        	           
		        	           
		        	        },
		        	        // the second argument will include all rules
		        	        {
		        	            rules: [
		        	                new OpenLayers.Rule({
		        	                    // a rule contains an optional filter
		        	                    filter: new OpenLayers.Filter.Comparison({
		        	                        type: OpenLayers.Filter.Comparison.EQUAL_TO,
		        	                        property: "nbre", // the "foo" feature attribute
		        	                        value: "MULTI AHORR"
		        	                    }),
		        	                    // if a feature matches the above filter, use this symbolizer
		        	                    symbolizer: {
		    		        	            graphicWidth: 45,
		    		        	            graphicHeight: 25,
		        	                        externalGraphic: "resources/Images/multiahorro.png"
		        	                    }
		        	                }),
		        	                new OpenLayers.Rule({
		        	                    filter: new OpenLayers.Filter.Comparison({
		        	                        type: OpenLayers.Filter.Comparison.EQUAL_TO,
		        	                        property: "nbre",
		        	                        value: "DEVOTO"
		        	                    }),
		        	                    symbolizer: {
		    		        	  
		        	                        externalGraphic: "resources/Images/devoto.png"
		        	                    }
		        	                }),
		        	                new OpenLayers.Rule({
		        	                    filter: new OpenLayers.Filter.Comparison({
		        	                        type: OpenLayers.Filter.Comparison.EQUAL_TO,
		        	                        property: "nbre",
		        	                        value: "DISCO"
		        	                    }),
		        	                    symbolizer: {
		    		        	            graphicWidth: 50,
		    		        	            graphicHeight: 20,
		        	                        externalGraphic: "resources/Images/disco.png"
		        	                    }
		        	                }),
		        	                new OpenLayers.Rule({
		        	                    filter: new OpenLayers.Filter.Comparison({
		        	                        type: OpenLayers.Filter.Comparison.EQUAL_TO,
		        	                        property: "nbre",
		        	                        value: "MACRO MERCA"
		        	                    }),
		        	                    symbolizer: {
		        	                        externalGraphic: "resources/Images/macromercado.png"
		        	                    }
		        	                }),
		        	                new OpenLayers.Rule({
		        	                    filter: new OpenLayers.Filter.Comparison({
		        	                        type: OpenLayers.Filter.Comparison.EQUAL_TO,
		        	                        property: "nbre",
		        	                        value: "TA TA"
		        	                    }),
		        	                    symbolizer: {
		    		        	            graphicWidth: 40,
		    		        	            graphicHeight: 20,
		        	                        externalGraphic: "resources/Images/tata.png"
		        	                    }
		        	                }),
		        	                new OpenLayers.Rule({
		        	                    filter: new OpenLayers.Filter.Comparison({
		        	                        type: OpenLayers.Filter.Comparison.EQUAL_TO,
		        	                        property: "nbre",
		        	                        value: "TIENDA INGL"
		        	                    }),
		        	                    symbolizer: {
		        	                        externalGraphic: "resources/Images/tiendainglesa.png"
		        	                    }
		        	                }),
		        	            
		        	              
		        	            ]
		        	        }
		        	    );
		        	    
		        	           
		      
		             supers = new OpenLayers.Layer.Vector(
		                    "serv_comerciales",
		                    {
		                        strategies: [new OpenLayers.Strategy.BBOX(), saveStrategy]
		                        , projection: new OpenLayers.Projection("EPSG:31981")
		                         ,protocol: new OpenLayers.Protocol.WFS({
		                            version: "1.1.0",
		                            srsName: "EPSG:31981",
		                            url: "http://localhost:8080/geoserver/wfs",
		                            featurePrefix: 'sige', //geoserver worspace name
		                            featureType: "serv_comerciales", //geoserver Layer Name
		                            featureNS: "localhost:8080/geoserver/sige", // Edit Workspace Namespace URI
		                            geometryName: "geom", // field in Feature Type details with type "Geometry"
		                            
		                        }),
		                        filter:"",
		                        styleMap: new OpenLayers.StyleMap(styleSuper)
		                    
		                    });


			/*           var styleParadas = new OpenLayers.Style(
			        	        // the first argument is a base symbolizer
			        	        // all other symbolizers in rules will extend this one
			        	        {
			        	            graphicWidth: 10,
			        	            graphicHeight: 10,
			        	            externalGraphic: "resources/Images/bus.png"
			        	           
			        	        }
			        	    );
		             
		             paradas = new OpenLayers.Layer.Vector(
			                    "paradas",
			                    {
			                        strategies: [new OpenLayers.Strategy.BBOX(), saveStrategy]
			                        , projection: new OpenLayers.Projection("EPSG:31981")
			                         ,protocol: new OpenLayers.Protocol.WFS({
			                            version: "1.1.0",
			                            srsName: "EPSG:31981",
			                            url: "http://localhost:8080/geoserver/wfs",
			                            featurePrefix: 'sige', //geoserver worspace name
			                            featureType: "paradas", //geoserver Layer Name
			                            featureNS: "localhost:8080/geoserver/sige", // Edit Workspace Namespace URI
			                            geometryName: "geom", // field in Feature Type details with type "Geometry"
			                            
			                        }),
			                        filter:"",
			                        styleMap: new OpenLayers.StyleMap(styleParadas)
			                    
			                    });*/
		           
		             var styleAptos = new OpenLayers.Style(
			        	        // the first argument is a base symbolizer
			        	        // all other symbolizers in rules will extend this one
			        	        {
			        	            graphicWidth: 50,
			        	            graphicHeight: 50,
			        	            externalGraphic:"resources/Images/apto.png",
			        	           
			        	        });

		             var styleCasas = new OpenLayers.Style(
			        	        // the first argument is a base symbolizer
			        	        // all other symbolizers in rules will extend this one
			        	        {
			        	            graphicWidth: 40,
			        	            graphicHeight: 32,
			        	            externalGraphic:"resources/Images/casa.png",
			        	           
			        	        });			       
			            aptos = new OpenLayers.Layer.Vector(
			                    "aptogeom",
			                    {
			                        strategies: [new OpenLayers.Strategy.BBOX(), saveStrategy]
			                        , projection: new OpenLayers.Projection("EPSG:32721")
			                         ,protocol: new OpenLayers.Protocol.WFS({
			                            version: "1.1.0",
			                            srsName: "EPSG:32721",
			                            url: "http://localhost:8080/geoserver/wfs",
			                            featurePrefix: 'sige', //geoserver worspace name
			                            featureType: "aptogeom", //geoserver Layer Name
			                            featureNS: "localhost:8080/geoserver/sige", // Edit Workspace Namespace URI
			                            geometryName: "punto", // field in Feature Type details with type "Geometry"
			                            
			                        }),

			                        filter: new OpenLayers.Filter.Logical({
			            		    	type: OpenLayers.Filter.Logical.OR,
			            		    	filters:[ new OpenLayers.Filter.Comparison({
	        	                        type: OpenLayers.Filter.Comparison.EQUAL_TO,
	        	                        property: "estado",
	        	                        value: "publica"
	        	                    }),
	        	                    new OpenLayers.Filter.Comparison({
	        	                        type: OpenLayers.Filter.Comparison.EQUAL_TO,
	        	                        property: "estado",
	        	                        value: "reservada"
	        	                    })]
		                        }),
			                        styleMap: new OpenLayers.StyleMap(styleAptos)
			                    
			                    });
		         		           
		           casageom = new OpenLayers.Layer.Vector(
		                    "casageom",
		                    {
		                        strategies: [new OpenLayers.Strategy.BBOX(), saveStrategy]
		                        , projection: new OpenLayers.Projection("EPSG:32721")
		                         ,protocol: new OpenLayers.Protocol.WFS({
		                            version: "1.1.0",
		                            srsName: "EPSG:32721",
		                            url: "http://localhost:8080/geoserver/wfs",
		                            featurePrefix: 'sige', //geoserver worspace name
		                            featureType: "casageom", //geoserver Layer Name
		                            featureNS: "localhost:8080/geoserver/sige", // Edit Workspace Namespace URI
		                            geometryName: "punto", // field in Feature Type details with type "Geometry"
		                           
		                        }),
			                    filter: new OpenLayers.Filter.Logical({
			            		    	type: OpenLayers.Filter.Logical.OR,
			            		    	filters:[ new OpenLayers.Filter.Comparison({
	        	                        type: OpenLayers.Filter.Comparison.EQUAL_TO,
	        	                        property: "estado",
	        	                        value: "publica"
	        	                    }),
	        	                    new OpenLayers.Filter.Comparison({
	        	                        type: OpenLayers.Filter.Comparison.EQUAL_TO,
	        	                        property: "estado",
	        	                        value: "reservada"
	        	                    })]
		                        }),
		                    
		                        styleMap: new OpenLayers.StyleMap(styleCasas)
		                    
		                    });
		           
		           	           
		           map.addLayers([tiled,supers,casageom,aptos]);
/**/
		           var selectFeature = new OpenLayers.Control.SelectFeature([aptos,casageom ], {
                	   hover: false,
                	   onSelect: clickNotice,
                       autoActivate: true
                   });
		       

		           
        		   map.addControl(selectFeature);



            		   var geolocate = new OpenLayers.Control.Geolocate({
        			    bind: false,
        			    geolocationOptions: {
        			        enableHighAccuracy: true,
        			        maximumAge: 0,
        			        timeout: 7000
        			    }
        			});
            		geolocate.events.register("locationupdated",geolocate,function(e) {	
            			
            		  proj4.defs("EPSG:32721","+proj=utm +zone=21 +south +datum=WGS84 +units=m +no_defs");	

            		 //var proj =	new OpenLayers.Projection("EPSG:4326");
            		 var ds = proj4("EPSG:32721",[e.position.coords.longitude, e.position.coords.latitude]);
                	 //var ds = new OpenLayers.LonLat(e.eposition.coords.longitude, e.position.coords.latitude);
            		 //ds.transform(proj, map.getProjectionObject());
            		 
                	var lonLat = new OpenLayers.LonLat(ds[0],ds[1]);
            		 
                	 map.panTo(lonLat);
                			  });
               			
        			map.addControl(geolocate);
        		
        			 
        			geolocate.activate();
        			
        			
        		   
        		 /*  navigator.geolocation.getCurrentPosition(function(position) {       
        		        lat= position.coords.latitude;
        		        lon= position.coords.longitude;
        		        
        		        var lonlat = new OpenLayers.LonLat(lon, lat).transform(new OpenLayers.Projection("EPSG:4326"),new OpenLayers.Projection("EPSG:32721"));
        		        
        		       // var lonLat = new OpenLayers.LonLat(position.coords.longitude, position.coords.latitude).transform(new OpenLayers.Projection("EPSG:4326"), map.getProjectionObject());
        		                                        
        		    
        		       
        		     
        		        map.setCenter(lonLat, 8);
        		        map.panTo(lonlat);
        		    });*/


        		   function clickNotice(event) {
    		        	

	        	        var id = event.attributes.id;
						var input = document.getElementById('consultaInmueble:idcasas');
						input.value=id;
						

						
						
						if(event.layer.name=="casageom"){

							event.attributes.visitas= parseInt(event.attributes.visitas) + 1;

							event.state = OpenLayers.State.UPDATE;
							saveStrategy.save();
							document.getElementById('consultaInmueble:getinfo').click();
							document.getElementById('consultaInmueble:propiedad').value="Casa";
						
						}else{

							event.attributes.visitas= parseInt(event.attributes.visitas) + 1;

							event.state = OpenLayers.State.UPDATE;
							saveStrategy.save();
							
							document.getElementById('consultaInmueble:getinfoApto').click();
							document.getElementById('consultaInmueble:propiedad').value="Apartamento";
						}

						selectFeature.unselectAll();

		        }      
		        
		  /**/         
		           var panel = new OpenLayers.Control.Panel(
		                   {displayClass: 'olControlEditingToolbar'}
		               );
	               
		                   panel.addControls(
		                       [new OpenLayers.Control.Navigation()]
		                   );
		                   
		                   map.addControl(panel);
		                   map.addControl(new OpenLayers.Control.LayerSwitcher());
		                   
		           map.events.register("zoomend", map, zoomChanged);
 		           map.zoomTo(7);
 		           
			}
	
	function zoomChanged() {
		//<![CDATA[
		   zoom = map.getZoom();

			  
		   if (zoom >=8) {
			    supers.setVisibility(true);
			//	paradas.setVisibility(true);
		   }
		   else  {
			   supers.setVisibility(false);
			 //  paradas.setVisibility(false);
		   }
		   //]]>
		}
	
	function filtrarCasa(){

		var inputs = document.getElementById('consultaInmueble:Casa');
		var idFilter = [];
		var filt =[];
		
		for (key in inputs.children) {
			
			if(!(isNaN(key))){
			idFilter.push(inputs.children[key].value);
			}
			
		}
		for (key in idFilter){
			    filt[key] = new OpenLayers.Filter.Comparison({
			    type: OpenLayers.Filter.Comparison.EQUAL_TO,
			     property: "id",
			    value: idFilter[key]
			});
			
		}
		casageom.filter= new OpenLayers.Filter.Logical({
		    	type: OpenLayers.Filter.Logical.OR,
		    	filters: filt
		});
		casageom.refresh({force:true});

	}
	
	function filtrarApto(){

		var inputsApto =document.getElementById('consultaInmueble:Apto');
		
		var idFilterApto=[];
		
		var filtApto =[];


		for (key in inputsApto.children) {
			
			if(!(isNaN(key))){
			idFilterApto.push(inputsApto.children[key].value);
			}
			
		}

		for (key in idFilterApto){
		    filtApto[key] = new OpenLayers.Filter.Comparison({
		    type: OpenLayers.Filter.Comparison.EQUAL_TO,
		     property: "id",
		    value: idFilterApto[key]
			});
		
		}

		aptos.filter= new OpenLayers.Filter.Logical({
	    	type: OpenLayers.Filter.Logical.OR,
	    	filters: filtApto
		});

		
		aptos.refresh({force:true});

	}
	
	function updateFilter() {

		var Prop = document.getElementById('consultaInmueble:Prop').value;
		
		if (Prop=="Casa"){ 
			
			filtrarCasa();
			casageom.setVisibility(true);
			aptos.setVisibility(false);
		}
		else if (Prop=="Apartamento"){
			filtrarApto();
			casageom.setVisibility(false);
			aptos.setVisibility(true);
		}
		else{
			filtrarCasa();
			filtrarApto();
			casageom.setVisibility(true);
			aptos.setVisibility(true);
		}
		

		
	}
	function show(){
		
		document.getElementById('este').click();

	}
	
	function handleAjax(data) {
	    var status = data.status;

	    switch(status) {
	      
	        case "success":
	            // This is invoked right after successful processing of ajax response and update of HTML DOM.
	            updateFilter();
	            break;
	    }
	}
	function handleAjax2(data) {
	    var status = data.status;

	    switch(status) {
	        case "success":
	            // This is invoked right after successful processing of ajax response and update of HTML DOM.
	             show();
	            break;
	    }
	}

    </script>
</h:head>

<h:body class="fondo" onload="init()"  >
	
 <ui:include src="/navbar.xhtml" />

<div id="cont" class="contenedor">

<h:form id="consultaInmueble">

 <h:inputHidden value="#{propiedadMB.idPunto}" id="idcasas" />

     
    <h:commandButton id="getinfo" actionListener="#{propiedadMB.getInfo}" style="display: none;" >
   	 <f:ajax execute="@form" render="amodal" onevent="handleAjax2" />
    </h:commandButton>
    <h:commandButton id="redirect"  action="#{propiedadMB.detalleInmueble}" value="" style="display: none;">  </h:commandButton>
     <h:commandButton id="getinfoApto" actionListener="#{propiedadMB.getInfoApto}" style="display: none;" >
  		  <f:ajax execute="@form" render="amodal" onevent="handleAjax2" />
    </h:commandButton>
    <h:inputHidden value="#{propiedadMB.propiedadClick}" id="propiedad" />




  <b:panel id="mapa" styleClass="panel panel-primary " title="Consultas">
  
  <p>Consultas por inmueble.</p>
  	
  <div id="mapWrap" class="mapWrap">
  <div id="map" class="map"></div>
  </div>	
  
  

     
 <b:panelGrid colSpans="2,10" rowClasses="rowform">
 
	 	<h:outputLabel value="Titulo de la casa" />
		<b:inputText span="8" value="#{propiedadMB.titulo}"/>
		
		<h:outputLabel value="Tipo de inmueble" />	
	         
		<b:selectOneMenu span="8" id="Prop" value="#{propiedadMB.propiedad}" >
			<f:selectItem itemLabel="Cualquiera" itemValue="Cualquiera"/>
			<f:selectItem itemLabel="Casa" itemValue="Casa"/>
			<f:selectItem itemLabel="Apartamento" itemValue="Apartamento"/>
		</b:selectOneMenu>
	     
	    <h:outputLabel value="Barrio de la casa" />	    
	    <b:inputText span="8" value="#{propiedadMB.barrio}"/>
	    
	    <h:outputLabel value="Utilidad del inmueble" />	
	    
	    <b:selectOneMenu span="8"  value="#{propiedadMB.tipoProp}" >
	    	<f:selectItem itemLabel="Cualquiera" itemValue="Cualquiera"/>
            <f:selectItem itemLabel="Comercial" itemValue="Comercial"/>
            <f:selectItem itemLabel="Residencial" itemValue="Residencial"/>
        </b:selectOneMenu>
        
        <h:outputLabel value="Tipo de Contrato" />	
	    
	    <b:selectOneMenu span="8"  value="#{propiedadMB.tipoNegocio}" >
	    	<f:selectItem itemLabel="Cualquiera" itemValue="Cualquiera"/>
            <f:selectItem itemLabel="Alquiler" itemValue="Alquiler"/>
            <f:selectItem itemLabel="Venta" itemValue="Venta"/>
        </b:selectOneMenu>
        
        <h:outputLabel value="Cantidad de baNIos" />	    
	    <b:inputText span="8" value="#{propiedadMB.cantBanios}"/>
	    
	    <h:outputLabel value="Tamaño minimo: " />	    
	    <b:inputText span="8" value="#{propiedadMB.tamanio}"/>
	    
	            <h:outputLabel value="Precio maximo" />	    
	    <b:inputText span="8" value="#{propiedadMB.precio}"/>
        
     
        <h:outputLabel value="Cantidad de cuartos" />	    
	    <b:inputText span="8" value="#{propiedadMB.cantCuartos}"/>
        
	    

	    
	    <h:outputLabel value="Garage: " />
	    <b:selectBooleanCheckbox value="#{propiedadMB.garage}" />
 	</b:panelGrid>
 	
  	<b:panel id="Geo" styleClass="panel panel-primary " title="Consultas avanzadas" >
	
		<b:panelGrid colSpans="2,10" rowClasses="rowform">
				<h:outputLabel value="Ingrese a cuantos metros de un supermercado" />	    
			    <b:inputText span="8" value="#{propiedadMB.distanciaInteres}"/>
			    
			    <h:outputLabel value="Distancia a una parada de omnibus" />	    
			    <b:inputText span="8" value="#{propiedadMB.distanciaParada}"/>
			    
			    <h:outputLabel value="Indique a cuantos metros del mar" />	    
			    <b:inputText span="8" value="#{propiedadMB.distanciaMar}"/>
			    
		</b:panelGrid>
		
		 <h:outputLabel value="Marque la esquina donde debe dejarlo el omnibus" />	
		 
		 <b:panelGrid colSpans="2,10" rowClasses="rowform">
		 
			 <h:outputLabel value="Calle" />	
			 <b:inputText span="8" value="#{propiedadMB.calle1}"/>
			 
			 <h:outputLabel value="Esquina" />	
			 <b:inputText span="8" value="#{propiedadMB.calle2}"/>
			 
			 <h:outputLabel value="A cuantos metros le gustaria tomar este omnibus ?" />	
			 <b:inputText span="8" value="#{propiedadMB.distanciaBus}"/>
		 </b:panelGrid>    
		 
			
	</b:panel>
	
 	
  <h:commandButton id="save" value="Consultar" actionListener="#{propiedadMB.consultaPropiedad}">
 		<f:ajax execute="@form" onevent="handleAjax" render="idcasa Casa Apto" update="Casa Apto"/>
  </h:commandButton>	
  </b:panel>
  
  <h:inputHidden value="#{propiedadMB.idCasa}" id="idcasa" />
 
<h:panelGroup  id="Casa">
    <ui:repeat value="#{propiedadMB.casas}"  var="id">
		<h:inputHidden value="#{id}" class="ids" /> 
	</ui:repeat>
</h:panelGroup>

<h:panelGroup  id="Apto">
    <ui:repeat value="#{propiedadMB.aptos}"  var="id">
		<h:inputHidden value="#{id}" class="ids" /> 
	</ui:repeat>
</h:panelGroup>

    

</h:form>

	

</div>
   <a id="este" href="#modal" style="visibility: hidden;">Call the modal with data-remodal-id="modal"</a>
   <div  class="remodal" data-remodal-id="modal">
	  <button data-remodal-action="close" class="remodal-close"></button>
	  
	  <h1>INMUEBLES</h1>
	 
	  
	   <b:panelGrid id="amodal" colSpans="4,8" rowClasses="rowform">
    
	    <h:outputLabel value="Titulo de la casa: " />	    
	    <h:outputLabel value="#{propiedadMB.titulo}" />
	    
	    <h:outputLabel value="Barrio de la casa: " />   
	    <h:outputLabel value="#{propiedadMB.barrio}" />	
	    
	    <h:outputLabel value="Tipo de propiedad: " />
	    <h:outputLabel value="#{propiedadMB.tipoProp}" />	
        
        <h:outputLabel value="Cantidad de baños: " />
        <h:outputLabel value="#{propiedadMB.cantBanios}" />	 
	   
	    <h:outputLabel value="Cantidad de cuartos: " />
        <h:outputLabel value="#{propiedadMB.cantCuartos}" />	
        
        <h:outputLabel value="Tamaño de la propiedad : " />
        <h:outputLabel value="#{propiedadMB.tamanio}" />
        
        <h:outputLabel value="Precio : $" />
        <h:outputLabel value="#{propiedadMB.precio}" />
        
        <h:outputLabel value="Piscina:" rendered="#{propiedadMB.piscina} != false" />
	    <h:outputLabel value="#{propiedadMB.piscina}"  rendered="#{propiedadMB.piscina} != false"/>
	    
	    <h:outputLabel value="Garage: " rendered="#{propiedadMB.garage} != false" />
	    <h:outputLabel value="#{propiedadMB.garage} " rendered="#{propiedadMB.garage} != false" />
	   
	  </b:panelGrid> 
	    
	  <button data-remodal-action="cancel" class="remodal-cancel" id="btnDetalles">Ver detalles</button>

</div>


</h:body>


</html>
